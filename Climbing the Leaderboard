#include <bits/stdc++.h>

using namespace std;

vector<string> split_string(string);

// Complete the climbingLeaderboard function below.
vector<int> climbingLeaderboard(vector<int> scores, vector<int> alice) {
    vector<int> out, p_scores;
    int alice_size = alice.size();
    int scores_size = scores.size();
    out.reserve(alice_size);
    p_scores.reserve(scores_size);
    p_scores.emplace_back(scores[0]);
    for (int s_loop = 1; s_loop < scores_size; s_loop++) {
        if (scores[s_loop] != scores[s_loop - 1]) {
            p_scores.emplace_back(scores[s_loop]);
        }
    }
    int p_scores_size = p_scores.size();
    for (int a_loop = 0; a_loop < alice_size;) {
        for (int s_loop = (p_scores_size - 1); s_loop >= 0; s_loop--) {
            if (p_scores[s_loop] > alice[a_loop]) {
                out.emplace_back(s_loop + 2);
                std::cout << (s_loop + 2) << std::endl;
                a_loop++;
                if (a_loop == alice_size) {
                    return out;
                }
                s_loop++;
            }
        }
        out.emplace_back(1);
        a_loop++;
        if (a_loop == alice_size) {
            return out;
        }
    }
    return out;
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    int scores_count;
    cin >> scores_count;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    string scores_temp_temp;
    getline(cin, scores_temp_temp);

    vector<string> scores_temp = split_string(scores_temp_temp);

    vector<int> scores(scores_count);

    for (int i = 0; i < scores_count; i++) {
        int scores_item = stoi(scores_temp[i]);

        scores[i] = scores_item;
    }

    int alice_count;
    cin >> alice_count;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    string alice_temp_temp;
    getline(cin, alice_temp_temp);

    vector<string> alice_temp = split_string(alice_temp_temp);

    vector<int> alice(alice_count);

    for (int i = 0; i < alice_count; i++) {
        int alice_item = stoi(alice_temp[i]);

        alice[i] = alice_item;
    }

    vector<int> result = climbingLeaderboard(scores, alice);

    for (int i = 0; i < result.size(); i++) {
        fout << result[i];

        if (i != result.size() - 1) {
            fout << "\n";
        }
    }

    fout << "\n";

    fout.close();

    return 0;
}

vector<string> split_string(string input_string) {
    string::iterator new_end = unique(input_string.begin(), input_string.end(), [] (const char &x, const char &y) {
        return x == y and x == ' ';
    });

    input_string.erase(new_end, input_string.end());

    while (input_string[input_string.length() - 1] == ' ') {
        input_string.pop_back();
    }

    vector<string> splits;
    char delimiter = ' ';

    size_t i = 0;
    size_t pos = input_string.find(delimiter);

    while (pos != string::npos) {
        splits.push_back(input_string.substr(i, pos - i));

        i = pos + 1;
        pos = input_string.find(delimiter, i);
    }

    splits.push_back(input_string.substr(i, min(pos, input_string.length()) - i + 1));

    return splits;
}
